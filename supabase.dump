

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pgsodium";








ALTER SCHEMA "public" OWNER TO "postgres";


CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."transaction_type" AS ENUM (
    'Income',
    'Expense'
);


ALTER TYPE "public"."transaction_type" OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."set_transaction_type"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  SELECT 
    CASE 
      WHEN c.type = 'income' THEN 'Income'::"transaction_type"
      ELSE 'Expense'::"transaction_type"
    END
  INTO NEW.type
  FROM "categories" c
  WHERE c.id = NEW.category_id;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."set_transaction_type"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_month_on_transaction_delete"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF OLD.type = 'Income' THEN
    UPDATE months
    SET 
      total_income = total_income - OLD.amount_cad,
      transaction_count = transaction_count - 1
    WHERE id = OLD.month_id;
  ELSE
    UPDATE months
    SET 
      total_expenses = total_expenses - OLD.amount_cad,
      transaction_count = transaction_count - 1
    WHERE id = OLD.month_id;
  END IF;
  
  RETURN OLD;
END;
$$;


ALTER FUNCTION "public"."update_month_on_transaction_delete"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_month_on_transaction_insert"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  IF NEW.type = 'Income' THEN
    UPDATE months
    SET 
      total_income = total_income + NEW.amount_cad,
      transaction_count = transaction_count + 1
    WHERE id = NEW.month_id;
  ELSE
    UPDATE months
    SET 
      total_expenses = total_expenses + NEW.amount_cad,
      transaction_count = transaction_count + 1
    WHERE id = NEW.month_id;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_month_on_transaction_insert"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_month_on_transaction_update"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
BEGIN
  -- Handle type changes (Income <-> Expense)
  IF OLD.type != NEW.type THEN
    IF OLD.type = 'Income' THEN
      -- Changed from Income to Expense
      UPDATE months
      SET 
        total_income = total_income - OLD.amount_cad,
        total_expenses = total_expenses + NEW.amount_cad
      WHERE id = NEW.month_id;
    ELSE
      -- Changed from Expense to Income
      UPDATE months
      SET 
        total_expenses = total_expenses - OLD.amount_cad,
        total_income = total_income + NEW.amount_cad
      WHERE id = NEW.month_id;
    END IF;
  ELSE
    -- No type change, just amount change
    IF NEW.type = 'Income' THEN
      UPDATE months
      SET 
        total_income = total_income - OLD.amount_cad + NEW.amount_cad
      WHERE id = NEW.month_id;
    ELSE
      UPDATE months
      SET 
        total_expenses = total_expenses - OLD.amount_cad + NEW.amount_cad
      WHERE id = NEW.month_id;
    END IF;
  END IF;
  
  -- If month_id changed, we need to update both months
  IF OLD.month_id != NEW.month_id THEN
    -- Decrement count in old month
    UPDATE months
    SET transaction_count = transaction_count - 1
    WHERE id = OLD.month_id;
    
    -- Increment count in new month
    UPDATE months
    SET transaction_count = transaction_count + 1
    WHERE id = NEW.month_id;
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."update_month_on_transaction_update"() OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."validate_transaction_type"() RETURNS "trigger"
    LANGUAGE "plpgsql"
    AS $$
DECLARE
  category_type TEXT;
BEGIN
  -- Get the category type
  SELECT type INTO category_type
  FROM "categories"
  WHERE id = NEW.category_id;
  
  -- Validate type consistency
  IF (category_type = 'income' AND NEW.type != 'Income') OR
     (category_type != 'income' AND NEW.type != 'Expense') THEN
    RAISE EXCEPTION 'Transaction type must match category type';
  END IF;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."validate_transaction_type"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."_prisma_migrations" (
    "id" character varying(36) NOT NULL,
    "checksum" character varying(64) NOT NULL,
    "finished_at" timestamp with time zone,
    "migration_name" character varying(255) NOT NULL,
    "logs" "text",
    "rolled_back_at" timestamp with time zone,
    "started_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "applied_steps_count" integer DEFAULT 0 NOT NULL
);


ALTER TABLE "public"."_prisma_migrations" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."categories" (
    "id" integer NOT NULL,
    "name" "text" NOT NULL,
    "type" "text" NOT NULL,
    "notes" "text",
    "created_at" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "is_recurring" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."categories" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."categories_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."categories_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."categories_id_seq" OWNED BY "public"."categories"."id";



CREATE TABLE IF NOT EXISTS "public"."months" (
    "id" integer NOT NULL,
    "month" integer NOT NULL,
    "year" integer NOT NULL,
    "notes" "text",
    "created_at" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "total_expenses" numeric(10,2) DEFAULT 0 NOT NULL,
    "total_income" numeric(10,2) DEFAULT 0 NOT NULL,
    "transaction_count" integer DEFAULT 0 NOT NULL,
    "recurring_expenses" numeric(10,2) DEFAULT 0 NOT NULL
);


ALTER TABLE "public"."months" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."months_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."months_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."months_id_seq" OWNED BY "public"."months"."id";



CREATE TABLE IF NOT EXISTS "public"."recurring_transactions" (
    "id" integer NOT NULL,
    "user_id" "uuid" NOT NULL,
    "name" "text" NOT NULL,
    "amount_cad" numeric(10,2) NOT NULL,
    "amount_usd" numeric(10,2),
    "category_id" integer NOT NULL,
    "notes" "text",
    "day_of_month" integer,
    "created_at" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "type" "public"."transaction_type" DEFAULT 'Expense'::"public"."transaction_type" NOT NULL
);


ALTER TABLE "public"."recurring_transactions" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."recurring_transactions_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."recurring_transactions_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."recurring_transactions_id_seq" OWNED BY "public"."recurring_transactions"."id";



CREATE TABLE IF NOT EXISTS "public"."transactions" (
    "id" integer NOT NULL,
    "user_id" "uuid" NOT NULL,
    "month_id" integer NOT NULL,
    "name" "text" NOT NULL,
    "amount_cad" numeric(10,2) NOT NULL,
    "amount_usd" numeric(10,2),
    "category_id" integer NOT NULL,
    "notes" "text",
    "date" "date" NOT NULL,
    "created_at" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
    "type" "public"."transaction_type" DEFAULT 'Expense'::"public"."transaction_type" NOT NULL
);


ALTER TABLE "public"."transactions" OWNER TO "postgres";


CREATE SEQUENCE IF NOT EXISTS "public"."transactions_id_seq"
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE "public"."transactions_id_seq" OWNER TO "postgres";


ALTER SEQUENCE "public"."transactions_id_seq" OWNED BY "public"."transactions"."id";



CREATE TABLE IF NOT EXISTS "public"."users" (
    "id" "uuid" NOT NULL,
    "email" "text" NOT NULL,
    "password_hash" "text",
    "created_at" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL
);


ALTER TABLE "public"."users" OWNER TO "postgres";


ALTER TABLE ONLY "public"."categories" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."categories_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."months" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."months_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."recurring_transactions" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."recurring_transactions_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."transactions" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."transactions_id_seq"'::"regclass");



ALTER TABLE ONLY "public"."_prisma_migrations"
    ADD CONSTRAINT "_prisma_migrations_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."categories"
    ADD CONSTRAINT "categories_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."months"
    ADD CONSTRAINT "months_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."recurring_transactions"
    ADD CONSTRAINT "recurring_transactions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."transactions"
    ADD CONSTRAINT "transactions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("id");



CREATE INDEX "categories_name_idx" ON "public"."categories" USING "btree" ("name");



CREATE UNIQUE INDEX "categories_name_key" ON "public"."categories" USING "btree" ("name");



CREATE INDEX "months_month_year_idx" ON "public"."months" USING "btree" ("month", "year");



CREATE UNIQUE INDEX "months_month_year_key" ON "public"."months" USING "btree" ("month", "year");



CREATE INDEX "recurring_transactions_category_id_idx" ON "public"."recurring_transactions" USING "btree" ("category_id");



CREATE INDEX "recurring_transactions_user_id_idx" ON "public"."recurring_transactions" USING "btree" ("user_id");



CREATE INDEX "transactions_category_id_idx" ON "public"."transactions" USING "btree" ("category_id");



CREATE INDEX "transactions_month_id_idx" ON "public"."transactions" USING "btree" ("month_id");



CREATE INDEX "transactions_user_id_idx" ON "public"."transactions" USING "btree" ("user_id");



CREATE UNIQUE INDEX "users_email_key" ON "public"."users" USING "btree" ("email");



CREATE OR REPLACE TRIGGER "recurring_transaction_type_insert_trigger" BEFORE INSERT ON "public"."recurring_transactions" FOR EACH ROW EXECUTE FUNCTION "public"."set_transaction_type"();



CREATE OR REPLACE TRIGGER "recurring_transaction_type_update_trigger" BEFORE UPDATE OF "category_id" ON "public"."recurring_transactions" FOR EACH ROW EXECUTE FUNCTION "public"."set_transaction_type"();



CREATE OR REPLACE TRIGGER "recurring_transaction_type_validate_trigger" BEFORE UPDATE OF "type" ON "public"."recurring_transactions" FOR EACH ROW EXECUTE FUNCTION "public"."validate_transaction_type"();



CREATE OR REPLACE TRIGGER "transaction_delete_trigger" AFTER DELETE ON "public"."transactions" FOR EACH ROW EXECUTE FUNCTION "public"."update_month_on_transaction_delete"();



CREATE OR REPLACE TRIGGER "transaction_insert_trigger" AFTER INSERT ON "public"."transactions" FOR EACH ROW EXECUTE FUNCTION "public"."update_month_on_transaction_insert"();



CREATE OR REPLACE TRIGGER "transaction_type_insert_trigger" BEFORE INSERT ON "public"."transactions" FOR EACH ROW EXECUTE FUNCTION "public"."set_transaction_type"();



CREATE OR REPLACE TRIGGER "transaction_type_update_trigger" BEFORE UPDATE OF "category_id" ON "public"."transactions" FOR EACH ROW EXECUTE FUNCTION "public"."set_transaction_type"();



CREATE OR REPLACE TRIGGER "transaction_type_validate_trigger" BEFORE UPDATE OF "type" ON "public"."transactions" FOR EACH ROW EXECUTE FUNCTION "public"."validate_transaction_type"();



CREATE OR REPLACE TRIGGER "transaction_update_trigger" AFTER UPDATE ON "public"."transactions" FOR EACH ROW EXECUTE FUNCTION "public"."update_month_on_transaction_update"();



ALTER TABLE ONLY "public"."recurring_transactions"
    ADD CONSTRAINT "recurring_transactions_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON UPDATE CASCADE ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."recurring_transactions"
    ADD CONSTRAINT "recurring_transactions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."transactions"
    ADD CONSTRAINT "transactions_category_id_fkey" FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON UPDATE CASCADE ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."transactions"
    ADD CONSTRAINT "transactions_month_id_fkey" FOREIGN KEY ("month_id") REFERENCES "public"."months"("id") ON UPDATE CASCADE ON DELETE RESTRICT;



ALTER TABLE ONLY "public"."transactions"
    ADD CONSTRAINT "transactions_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("id") ON UPDATE CASCADE ON DELETE RESTRICT;





ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


REVOKE USAGE ON SCHEMA "public" FROM PUBLIC;










































































































































































































































RESET ALL;
